# 10/8: Giulio closed out previous issue. I downloaded the new repository but am still having issues. No longer seeing the "Failed to calculate fork choice" error,
#... but am still getting the internal service error for the port mapping and am still having the same stuck pre-merge issue.
# I built to integration tools to check on the stages:
  # ./wmake.ps1 integration
  # ./build/bin/integration print_stages --chain=mainnet --datadir=A:\Erigon_Repo\Erigon_Data
# Left comment on same Github issue about status

# 11/20: made a code space

# 10/7: web.py won't work for the project because it doesn't have the capabilities of being able to iterate over all wallets and all of their transactions
  # Am having trouble syncing node with POS chain. Tried Prysm but had issues due to all the tutorials being for Linux. Was going to try Lighthouse but
  #...Erigon release a new version today that has a consensus light client.
  # Tried running erigon with the new light client and was receiving a repeat message of "No new block bodies" or something like that. This was while it was stuck at
  #... the last POW block. --> so had trouble with the merge.
  # So I tried to unwind some blocks but was unable to because I hadn't built the db-tools for the new erigon repo I downloaded. After trying to build db-tools
  #... was receiving error: "CMake Error: The source directory "C:/erigon_22.09.02/erigon/libmdbx" does not exist."
  #... come to find out that the "libmdbx" folder is not being created upon 
    # Testing other versions of erigon:
      # mkdir erigon_22.09.01
      # cd erigon_22.09.01
      # git clone --branch v2022.09.01 --single-branch https://github.com/ledgerwatch/erigon.git
      # cd erigon
        #!!! libmdbx folder is present in the erigon folder
      # .\wmake.ps1 erigon
        
        


# The Ethereum blockchain is downloaded, now need to figure out how to access the data.
# From my understanding can either use Erigon's built in RPC API + methods or can use something like web3.py

# Questions to answer:
#=================================================================================================================================================================
  # What does the "datadir" argument in the RPC Daemon execution do? Is it the same as the erigon.exe argument?
    # What does it mean when the default for "datadir" is "datadir=dev"?
  # How to hide node so that people can't access it:
    # tweet from @mole__man
      # "small tip for you sshlets 
        #...make your nodes listen on localhost, then run `ssh -L 8545:localhost:8545 root@node1` to tunnel connections to the node
        #...that way you avoid anyone other than yourself (ab)using your rpc"


# Helpful links for Erigon's RPC Daemon:
#=================================================================================================================================================================
  # RPC Daemon ReadMe: https://github.com/ledgerwatch/erigon/blob/devel/cmd/rpcdaemon/README.md
  # Using RPC Daemon to interact with node on Dev Chain: https://github.com/ledgerwatch/erigon/blob/devel/DEV_CHAIN.md

# Helpful links for CURL command:
#=================================================================================================================================================================
  # Tutorial or CURL: https://www.booleanworld.com/curl-command-tutorial-examples/

# Four ways to access the Ethereum database:
#=================================================================================================================================================================
  # source: https://ledgerwatch.github.io/turbo_geth_release.html
  # 1) JSON RPC API --> what I'm planning on using
  # 2) LMDB Python bindings
  # 3) Remote access w/ gRPC
  # 4) REST API daemon (locally or remotely) --> has limited functionality atm


# To run the RPC Daemon using JSON RPC API:
#=================================================================================================================================================================
# When I would have two Powershell windows open: 1 w/ the node running and 1 being the RPC Daemon trying to connect to the node
  # I was unable to connect because it said that you can only have 1 instance using the socket
# (9/4) It seems like the proper way to use the RPC Daemon is to not have the Erigon node running at the same time --> I was getting feedback when this was the case, but haven't fully fleshed out.
    # code: 
      # cd C:\erigon
      # ./build/bin/rpcdaemon --datadir=A:\Erigon_Repo\Erigon_Data --txpool.api.addr=localhost:9090 --private.api.addr=localhost:9090 --http.api=eth,erigon,web3,net,debug,trace,txpool
    # (9/5):
      # 1) do the above in a powershell window
      # 2) open a new powershell window and run erigon
        # cd C:\erigon
        # ./build/bin/erigon --datadir=A:\Erigon_Repo\Erigon_Data --private.api.addr=localhost:9090
      # 3) open Git bash, and using Git bash am able to successfully run some of the tests listed on the RPC Daemon ReadMe
      
 
 # I ran this: curl -X POST -H "Content-Type: application/json" --data '{"jsonrpc": "2.0", "method": "eth_getBlockReceipts", "params": ["0xe97c18"], "id":1}' localhost:8545
 # some notes on the output and trying to decode what it is...
 # Output will contain a series of dictionaries like so:     
 {
      "transactionHash": "0xf46a602a6d83ecff7891a2776bd1bcaf6eec11945757534abfea45dfe6d61912",
      "blockHash": "0x6ca6245f2041fa018a77f1dad3b173fad7aefbd787faa36fc5f5631a73f0f129",
      "blockNumber": "0xe97c18",
      "logs": [],
      "contractAddress": null,
      "effectiveGasPrice": "0x13c76a2180",
      "cumulativeGasUsed": "0x9003a",
      "from": "0x329afa43f8c89f65fb6b22397c1a098ea4210d7e",
      "gasUsed": "0x78610",
      "logsBloom": "0x
      "status": "0x0",
      "to": "0x7a250d5630b4cf539739df2c5dacb4c659f2488d",
      "transactionIndex": "0x1",
      "type": "0x0"
    }
  # Within each transaction their can be multiple sub-transactions each a nest dictionary within the primary dictionary, 
  #...the datapoints that are only listed once for the primary dictionary are:
      "contractAddress": null,
      "effectiveGasPrice": "0x553c41421",
      "cumulativeGasUsed": "0x17a2a",
      "from": "0x8e8f818d3371f797a2db7edb32803607c8b3c6a9",
      "gasUsed": "0x17a2a",
      "logsBloom": "0x
      "status": "0x1",
      "to": "0x98c3d3183c4b8a650614ad179a1a98be0a8d6b8e",
      "transactionIndex": "0x0",
      "type": "0x2"
  # However, the data within the nested dictionaries contains:
            "transactionHash": "0xf10c89bdfda2f2468ecbea171e4243fb44fc15a8989897d62b8efb6d1bc6ca91",
          "address": "0x7937619a9bd1234a303e4fe752b8d4f37d40e20c",
          "blockHash": "0x6ca6245f2041fa018a77f1dad3b173fad7aefbd787faa36fc5f5631a73f0f129",
          "blockNumber": "0xe97c18",
          "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002946e7c9d7168994000000000000000000000000000000000000000000000000000006f6067e9cc3903d0000000000000000000000000000000000000000000000000000000000000000",
          "logIndex": "0x3",
          "removed": false,
          "topics": [
            "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822",
            "0x00000000000000000000000098c3d3183c4b8a650614ad179a1a98be0a8d6b8e",
            "0x00000000000000000000000098c3d3183c4b8a650614ad179a1a98be0a8d6b8e"
          ],
          "transactionIndex": "0x0"
 
 
  # However, what I'm confused by is that in the RPC Daemon ReadMe file it says "Run Locally" and then gives this code snippet:
    # make erigon
    # ./build/bin/erigon --datadir=<your_data_dir> --private.api.addr=localhost:9090
    # make rpcdaemon
    # ./build/bin/rpcdaemon --datadir=<your_data_dir> --txpool.api.addr=localhost:9090 --private.api.addr=localhost:9090 --http.api=eth,erigon,web3,net,debug,trace,txpool
  # Which to me, indicates that you would run the node and the RPC Daemon at the same time???







